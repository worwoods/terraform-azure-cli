name: build-test

# trigger on any push
# but not on master or tags
# and only for Dockerfile related modifications
on:
  workflow_dispatch:
  push:
    tags-ignore:
      - "**"
    branches:
      - "**"
      - "!master"
    paths:
      - "Dockerfile"
      - "supported_versions.json"
      - "hashicorp.asc"
      - "tests/*"
      - ".dockerignore"
      - ".github/workflows/build-test.yml"

env:
  IMAGE_NAME: "terraform-azure-cli"

jobs:
  load_versions:
    uses: ./.github/workflows/include_supported-versions.yml

  build_containers:
    runs-on: ubuntu-20.04
    needs: load_versions
    strategy:
      matrix: ${{ fromJSON(needs.load_versions.outputs.matrix) }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Save branch name as env var
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Build and save image tag
        run: |
          echo "IMAGE_TAG=${BRANCH}_tf-${{ matrix.tf_version }}_az-${{ matrix.azcli_version }}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${IMAGE_NAME}_${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build image
        run: docker image build . --file Dockerfile --build-arg TERRAFORM_VERSION=${{ matrix.tf_version }} --build-arg AZURE_CLI_VERSION=${{ matrix.azcli_version }} --tag ${IMAGE_NAME}:${IMAGE_TAG}

      - name: Save image
        run: docker image save --output ${{ env.ARTIFACT_NAME }}.tar ${IMAGE_NAME}:${IMAGE_TAG}

      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar
    outputs:
      artifact_name: ${{ env.ARTIFACT_NAME }}


  test_container:
    runs-on: ubuntu-20.04
    needs:
      - build_containers
      - load_versions
    strategy:
      matrix: ${{ fromJSON(needs.load_versions.outputs.matrix) }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Retrieve Artifact name
        run: |
          echo "ARTIFACT_NAME=${{ needs.build_containers.outputs.artifact_name }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=$(echo ${{ needs.build_containers.outputs.artifact_name }} | awk -F_ {'print $1":"$2'})" >> $GITHUB_ENV

      - name: Download image artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Load image
        run: docker image load --input ${{ env.ARTIFACT_NAME }}.tar

      - name: Generate test config
        run: |
          export TF_VERSION=${{ matrix.tf_version }}
          export AZ_VERSION=${{ matrix.azcli_version }}
          envsubst '${TF_VERSION},${AZ_VERSION}' < tests/container-structure-tests.yml.template > tests/container-structure-tests.yml

      - name: run structure tests
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: ${{ env.IMAGE_NAME }}
          config: tests/container-structure-tests.yml

  delete_artifacts:
    runs-on: ubuntu-20.04
    needs:
      - load_versions
      - build_containers
      - test_container
    strategy:
      matrix: ${{ fromJSON(needs.build_containers.outputs.artifact_name) }}
    steps:
      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v2.0.0
        with:
          name: ${{ matrix }}
